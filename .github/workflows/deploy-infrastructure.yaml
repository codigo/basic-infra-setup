name: Deploy Application

on:
  repository_dispatch:
    types: [deploy-application]

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  HETZNER_CLOUD_KEY: ${{ secrets.HETZNER_CLOUD_KEY }}
  PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
  CLOUDFLARE_TUNNEL_SECRET: ${{ secrets.CLOUDFLARE_TUNNEL_SECRET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm ci

      - name: Process configuration files
        env:
          DOZZLE_PASSWORD: ${{ secrets.DOZZLE_PASSWORD }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          CONTAINER_REGISTRY_URL: ${{ vars.CONTAINER_REGISTRY_URL }}
          CONTAINER_REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          TYPESENSE_API_KEY: ${{ secrets.MAU_APP_TYPESENSE_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.MAU_APP_PB_ENCRYPTION_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          files=(
            "./tooling/data/dozzle/users.yaml"
            "./docker-compose.mau-app.yaml"
            "./docker-compose.tooling.yaml"
          )

          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "Processing $file"

              # Use sed to replace variables
              sed -i.bak -e '
                s|{{ DOZZLE_PASSWORD }}|'"$DOZZLE_PASSWORD"'|g
                s|{{ DISCORD_WEBHOOK }}|'"$DISCORD_WEBHOOK"'|g
                s|{{ CONTAINER_REGISTRY_URL }}|'"$CONTAINER_REGISTRY_URL"'|g
                s|{{ CONTAINER_REGISTRY_USERNAME }}|'"$CONTAINER_REGISTRY_USERNAME"'|g
                s|{{ CONTAINER_REGISTRY_PASSWORD }}|'"$CONTAINER_REGISTRY_PASSWORD"'|g
                s|{{ DOCKER_REGISTRY_USERNAME }}|'"$DOCKER_REGISTRY_USERNAME"'|g
                s|{{ DOCKER_REGISTRY_PASSWORD }}|'"$DOCKER_REGISTRY_PASSWORD"'|g
                s|{{ TYPESENSE_API_KEY }}|'"$TYPESENSE_API_KEY"'|g
                s|{{ ENCRYPTION_KEY }}|'"$ENCRYPTION_KEY"'|g
                s|{{ JWT_SECRET }}|'"$JWT_SECRET"'|g
              ' "$file"

              echo "Processed $file"
            else
              echo "File not found: $file"
            fi
          done

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub

          # Debug: Check SSH key files
          ls -l ~/.ssh
          wc -l ~/.ssh/id_rsa ~/.ssh/id_rsa.pub

      - name: Setup Pulumi
        uses: pulumi/actions@v5

      - name: Configure Pulumi
        run: |
          pulumi stack select codigo/${{ github.event.client_payload.name }}/prod
          pulumi config set aws:region ${{ vars.AWS_REGION }}
          pulumi config set dockerGroupId ${{ vars.DOCKER_GROUP_ID }}
          pulumi config set --secret hcloud:token ${{ secrets.HETZNER_CLOUD_KEY }}
          pulumi config set appName ${{ github.event.client_payload.name }}

          # Set configs from secrets and vars
          pulumi config set --secret awsAccessKeyId "${{ secrets.AWS_ACCESS_KEY_ID }}"
          pulumi config set --secret awsSecretAccessKey "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          pulumi config set --secret mauAppTypeSenseKey "${{ secrets.MAU_APP_TYPESENSE_API_KEY }}"
          pulumi config set --secret mauAppPBEncryptionKey "${{ secrets.MAU_APP_PB_ENCRYPTION_KEY }}"
          pulumi config set --secret dockerUsername "${{ secrets.CONTAINER_REGISTRY_USERNAME }}"
          pulumi config set --secret dockerPassword "${{ secrets.CONTAINER_REGISTRY_PASSWORD }}"
          pulumi config set dockerRegistry "${{ vars.CONTAINER_REGISTRY_URL }}"

          # Set SSH keys
          cat ~/.ssh/id_rsa.pub | openssl base64 | tr -d '\n' | pulumi config set sshPublicKey --secret
          cat ~/.ssh/id_rsa | openssl base64 | tr -d '\n' | pulumi config set sshPrivateKey --secret

          # Set configs from files
          for file in ./tooling/data/dozzle/users.yaml ./tooling/data/caddy/Caddyfile; do
            pulumi config set --secret $(basename $file .yaml | tr '.-' '_') "$(cat $file)"
          done

          # Set configs from files
          pulumi config set docker_compose_mau_app "$(cat ./docker-compose.mau-app.yaml)"
          pulumi config set docker_compose_tooling "$(cat ./docker-compose.tooling.yaml)"

          # Set configs from bin scripts
          for script in backupData uploadToS3 restoreAndCopyBackup; do
            pulumi config set --secret ${script}Script "$(cat ./bin/${script}.js)"
          done

          # Set entrypoints from bin scripts
          pulumi config set pocketbaseEntrypoint "$(cat ./mau-app/bin/pocketbase/entrypoint.sh)"
          pulumi config set typesenseEntrypoint "$(cat ./mau-app/bin/typesense/entrypoint.sh)"

          # Set backup directory
          pulumi config set backupDir ${{ vars.BACKUP_DIR }}

          # Set Cloudflare tunnel configurations
          pulumi config set --secret cloudflareAccountId "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          pulumi config set --secret cloudflareCodigoZoneId "${{ secrets.CLOUDFLARE_CODIGO_ZONE_ID }}"
          pulumi config set --secret cloudflareMaumercadoZoneId "${{ secrets.CLOUDFLARE_MAUMERCADO_ZONE_ID }}"
          pulumi config set --secret cloudflare:apiToken "${{ secrets.CLOUDFLARE_API_TOKEN }}"

          # Debug: Check Pulumi config (be careful not to expose secrets)
          pulumi config get appName
          pulumi config get aws:region

        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Deploy infrastructure
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: codigo/${{ github.event.client_payload.name }}/prod
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
