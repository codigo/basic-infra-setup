name: Deploy Application

on:
  repository_dispatch:
    types: [deploy-application]

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  HETZNER_CLOUD_KEY: ${{ secrets.HETZNER_CLOUD_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Process configuration files
        run: |
          # Process users.yaml if it contains placeholders
          if grep -q '\${.*}' ./tooling/data/dozzle/users.yaml; then
            sed -e 's|\${DOZZLE_PASSWORD}|${{ secrets.DOZZLE_PASSWORD }}|g' \
                ./tooling/data/dozzle/users.yaml > ./tooling/data/dozzle/processed_users.yaml
            mv ./tooling/data/dozzle/processed_users.yaml ./tooling/data/dozzle/users.yaml
          fi

          # Process shepherd-config.yaml if it contains placeholders
          if grep -q '\${.*}' ./tooling/data/shepherd/shepherd-config.yaml; then
            sed -e 's|\${DISCORD_WEBHOOK}|${{ secrets.DISCORD_WEBHOOK }}|g' \
                -e 's|\${CONTAINER_REGISTRY_URL}|${{ secrets.CONTAINER_REGISTRY_URL }}|g' \
                ./tooling/data/shepherd/shepherd-config.yaml > ./tooling/data/shepherd/processed_shepherd-config.yaml
            mv ./tooling/data/shepherd/processed_shepherd-config.yaml ./tooling/data/shepherd/shepherd-config.yaml
          fi

          # Process docker-compose files if they contain placeholders
          for file in docker-compose.*.yaml; do
            if grep -q '\${.*}' "$file"; then
              sed -e 's|\${CONTAINER_REGISTRY_URL}|${{ secrets.CONTAINER_REGISTRY_URL }}|g' \
                  -e 's|\${ORIGIN_CODIGO}|${{ secrets.ORIGIN_CODIGO }}|g' \
                  -e 's|\${ORIGIN_MAUMERCADO}|${{ secrets.ORIGIN_MAUMERCADO }}|g' \
                  "$file" > "processed_$file"
              mv "processed_$file" "$file"
            fi
          done

      - uses: pulumi/actions@v5
        name: Install Pulumi CLI
        with:
          stack-name: codigo/${{ github.event.client_payload.name }}/prod
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Configure Pulumi
        run: |
          pulumi config set aws:region ${{ secrets.AWS_REGION }}
          pulumi config set awsAccessKeyId --secret ${{ secrets.AWS_ACCESS_KEY_ID }}
          pulumi config set awsSecretAccessKey --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          pulumi config set --secret hcloud:token ${{ secrets.HETZNER_CLOUD_KEY }}
          pulumi config set appName ${{ github.event.client_payload.name }}
          pulumi config set sshPublicKey "${{ secrets.SSH_PUBLIC_KEY }}"
          pulumi config set mauAppTypeSenseKey --secret ${{ secrets.MAU_APP_TYPESENSE_API_KEY }}
          pulumi config set mauAppPBEncryptionKey --secret ${{ secrets.MAU_APP_PB_ENCRYPTION_KEY }}
          pulumi confit set backupDir ${{ vars.BACKUP_DIR }}
          pulumi config set dockerComposeMauApp "$(cat ./docker-compose.mau-app.yaml)"
          pulumi config set dockerComposeTooling "$(cat ./docker-compose.tooling.yaml)"
          pulumi config set dozzleUsers "$(cat ./tooling/data/dozzle/users.yaml)"
          pulumi config set shepherdConfig "$(cat ./tooling/data/shepherd/shepherd-config.yaml)"
          pulumi config set caddyfile "$(cat ./tooling/data/caddy/Caddyfile)"
          pulumi config set --secret backupDataScript "$(cat ./bin/backupData.js)"
          pulumi config set --secret uploadToS3Script "$(cat ./bin/uploadToS3.js)"
          pulumi config set --secret restoreBackupScript "$(cat ./bin/restoreBackup.js)"
          pulumi config set --secret restoreFromS3Script "$(cat ./bin/restoreFromS3.js)"
          cat ${{ secrets.SSH_PRIVATE_KEY }} | pulumi config set sshPrivateKey --secret

      - name: Deploy infrastructure
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: codigo/${{ github.event.client_payload.name }}/prod
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
